int main()
{   

    unsigned char buffer[1000];
    unsigned char buffer_capped[1000];

    printf("%s\n", "Enter a UTF-8 encoded string: ");
    fgets(buffer, 1000, stdin);

    buffer[strlen(buffer) - 1] = '\0';

    printf("%s", "Valid ASCII: ");
    if (is_ascii(buffer) == 1)
    {
        printf("%s\n", "true");
    }
    else if (is_ascii(buffer) ==  0)
    {
        printf("%s\n", "false");
    }
    
    int index = 0;
    while (buffer[index] != 0)
    {
        buffer_capped[index] = upper(buffer[index]);
        index += 1;
    }

    buffer_capped[index] = '\0';

    printf("%s%s\n", "Uppercased ASCII: ", buffer_capped);

    int count_1 = 0;
    int index_5 = 0;
    while (buffer[index_5] != '\0')
    {
        if (buffer[index_5] <= 127)
        {
            count_1 ++;
            index_5 ++;
        }
        else if ((buffer[index_5] & 0b11100000) == 0b11000000)
        {
            count_1 += 2;
            index_5 += 2;
        }
        else if ((buffer[index_5] & 0b11110000) == 0b11100000)
        {
            count_1 += 3;
            index_5 += 3;
        }
        else if ((buffer[index_5] & 0b11111000) == 0b11110000)
        {
            count_1 += 4;
            index_5 += 4;
        }
        else 
        {
            index_5++;
        }
    }

    printf("%s%d\n", "Length in bytes: ", count_1); 

    int count = 0;
    int index_1 = 0;
    while (buffer[index_1] != '\0')
    {
        if (buffer[index_1] <= 127)
        {
            count ++;
            index_1 ++;
        }
        else if ((buffer[index_1] & 0b11100000) == 0b11000000)
        {
            count ++;
            index_1 += 2;
        }
        else if ((buffer[index_1] & 0b11110000) == 0b11100000)
        {
            count ++;
            index_1 += 3;
        }
        else if ((buffer[index_1] & 0b11111000) == 0b11110000)
        {
            count ++;
            index_1 += 4;
        }
        else 
        {
            index_1++;
        }
    }

    printf("%s%d\n", "Number of code points: ", count);
    int index_2 = 0;
    unsigned int code_point_index = 0;
    unsigned int bytes_per_codepoint[100];
    while (buffer[index_2] != '\0')
    {
        if (buffer[index_2] <= 127)
        {
            bytes_per_codepoint[code_point_index] = 1;
            index_2 ++;
            code_point_index++;
        }
        else if ((buffer[index_2] & 0b11100000) == 0b11000000)
        {
            bytes_per_codepoint[code_point_index] = 2;
            index_2 += 2;
            code_point_index++;
        }
        else if ((buffer[index_2] & 0b11110000) == 0b11100000)
        {
            bytes_per_codepoint[code_point_index] = 3;
            index_2 += 3;
            code_point_index++;
        }
        else if ((buffer[index_2] & 0b11111000) == 0b11110000)
        {
            bytes_per_codepoint[code_point_index] = 4;
            index_2 += 4;
            code_point_index++;
        }
        else 
        {
            index_2++;
        }

    }

    printf("%s", "Bytes per code point: ");
    for (int i = 0; i < count; i++)
    {
        printf("%d ", bytes_per_codepoint[i]);
    }
    printf("\n");

    unsigned char substring[6];
    utf8_substring(buffer, 0, 6, substring);

    printf("%s", "Substring of the first 6 code points: \"");
    printf("%s", substring);
    printf("%s\n", "\"");


    int index_4 = 0;
    unsigned int code_points_decimal [1000];
    int cpid_index = 0;

    printf("%s", "Code points as decimal numbers: ");
    
    while (buffer[index_4] != '\0')
    {
        if (buffer[index_4] <= 127) 
        {
            code_points_decimal[cpid_index] = buffer[index_4];
            index_4++;
            cpid_index++;
        }
        else if ((buffer[index_4] & 0b11100000) == 0b11000000)
        {
            code_points_decimal[cpid_index] = code_point2(buffer[index_4], buffer[index_4+1]);
            index_4 += 2;
            cpid_index++;
        }
        else if ((buffer[index_4] & 0b11110000) == 0b11100000)
        {
            code_points_decimal[cpid_index] = code_point3(buffer[index_4], buffer[index_4+1], buffer[index_4+2]);
            index_4 += 3;
            cpid_index++;
        }
        else if ((buffer[index_4] & 0b11111000) == 0b11110000)
        {
            code_points_decimal[cpid_index] = code_point4(buffer[index_4], buffer[index_4+1], buffer[index_4+2], buffer[index_4+3]);
            index_4 += 4;
            cpid_index++;
        }
        else 
        {
            index_4++;
        }
        code_points_decimal[index_4] = '\0';
    }

    int y = 0;
    while (code_points_decimal[y] != '\0')
    {
    printf("%d ", code_points_decimal[y]);
    y++;
    }
    printf("\n");

    printf("%s", "Animal emojis: ");

    int index_3 = 0;
    unsigned char animal_emoji[100];
    int animal_emoji_index = 0;

    while (buffer[index_3] != '\0')
    {
        if(is_animal_emoji_at(buffer, index_3))
        {
            animal_emoji[index_3];
        }
    }
    


printf("%s\n", animal_emoji); 

char string[] = "🐩🐩";
printf("%d\n", codepoint_at(string, 0));

return 0;

}